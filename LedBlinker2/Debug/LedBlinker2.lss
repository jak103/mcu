
LedBlinker2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00803c00  000007b5  00000869  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000011  000087a4  000007a4  00000858  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000032  00803c32  00803c32  0000089b  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000089b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000368  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000042cd  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002198  00000000  00000000  00004f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000018d7  00000000  00000000  000070d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000069c  00000000  00000000  000089b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001c19  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cc7  00000000  00000000  0000ac65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002b8  00000000  00000000  0000b92c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_25>
  68:	0c 94 31 03 	jmp	0x662	; 0x662 <__vector_26>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	1c e3       	ldi	r17, 0x3C	; 60
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	bc e3       	ldi	r27, 0x3C	; 60
  8e:	e5 eb       	ldi	r30, 0xB5	; 181
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 33       	cpi	r26, 0x32	; 50
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	2c e3       	ldi	r18, 0x3C	; 60
  a0:	a2 e3       	ldi	r26, 0x32	; 50
  a2:	bc e3       	ldi	r27, 0x3C	; 60
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 36       	cpi	r26, 0x64	; 100
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  b2:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  ba:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <system_init>
  be:	08 95       	ret

000000c0 <main>:

int main(void)
{
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  c0:	0e 94 5d 00 	call	0xba	; 0xba <atmel_start_init>
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
  c4:	e4 e5       	ldi	r30, 0x54	; 84
  c6:	f4 e0       	ldi	r31, 0x04	; 4
  c8:	80 81       	ld	r24, Z
  ca:	88 7f       	andi	r24, 0xF8	; 248
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	80 83       	st	Z, r24

	Button_Pin_set_isc(PORT_ISC_FALLING_gc);
	
	currentState = INIT;
  d0:	10 92 5d 3c 	sts	0x3C5D, r1	; 0x803c5d <currentState>
	
	/* Replace with your application code */
	while (1) {
		
		switch (currentState)
  d4:	80 91 5d 3c 	lds	r24, 0x3C5D	; 0x803c5d <currentState>
  d8:	81 11       	cpse	r24, r1
  da:	fc cf       	rjmp	.-8      	; 0xd4 <main+0x14>
		{
			case INIT:
				printf("Init\r\n");
  dc:	84 ea       	ldi	r24, 0xA4	; 164
  de:	97 e8       	ldi	r25, 0x87	; 135
  e0:	0e 94 a0 03 	call	0x740	; 0x740 <puts>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	85 b9       	out	0x05, r24	; 5
				LED_Pin_set_level(1);
				currentState = LISTEN;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 5d 3c 	sts	0x3C5D, r24	; 0x803c5d <currentState>
				break;
  f0:	f1 cf       	rjmp	.-30     	; 0xd4 <main+0x14>

000000f2 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 95       	ret

000000f6 <CLKCTRL_init>:
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret

000000fa <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
  fa:	78 94       	sei

	return 0;
}
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret

00000100 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 c0       	rjmp	.+16     	; 0x114 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 104:	e8 2f       	mov	r30, r24
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	e0 5f       	subi	r30, 0xF0	; 240
 10a:	fb 4f       	sbci	r31, 0xFB	; 251
 10c:	90 81       	ld	r25, Z
 10e:	98 60       	ori	r25, 0x08	; 8
 110:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	b0 f3       	brcs	.-20     	; 0x104 <mcu_init+0x4>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 c0       	rjmp	.+16     	; 0x12c <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 11c:	e8 2f       	mov	r30, r24
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	e0 5d       	subi	r30, 0xD0	; 208
 122:	fb 4f       	sbci	r31, 0xFB	; 251
 124:	90 81       	ld	r25, Z
 126:	98 60       	ori	r25, 0x08	; 8
 128:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	b0 f3       	brcs	.-20     	; 0x11c <mcu_init+0x1c>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	08 c0       	rjmp	.+16     	; 0x144 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 134:	e8 2f       	mov	r30, r24
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	e0 5b       	subi	r30, 0xB0	; 176
 13a:	fb 4f       	sbci	r31, 0xFB	; 251
 13c:	90 81       	ld	r25, Z
 13e:	98 60       	ori	r25, 0x08	; 8
 140:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	88 30       	cpi	r24, 0x08	; 8
 146:	b0 f3       	brcs	.-20     	; 0x134 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 148:	08 95       	ret

0000014a <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	87 7f       	andi	r24, 0xF7	; 247
 14e:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 150:	e3 e3       	ldi	r30, 0x33	; 51
 152:	f4 e0       	ldi	r31, 0x04	; 4
 154:	80 81       	ld	r24, Z
 156:	87 7f       	andi	r24, 0xF7	; 247
 158:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8b 7f       	andi	r24, 0xFB	; 251
 15e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 160:	84 b1       	in	r24, 0x04	; 4
 162:	84 60       	ori	r24, 0x04	; 4
 164:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB2_set_dir(PORT_DIR_OUT);

	USART_0_init();
 166:	0e 94 84 03 	call	0x708	; 0x708 <USART_0_init>
 16a:	08 95       	ret

0000016c <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 16c:	80 b1       	in	r24, 0x00	; 0
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 172:	e2 e1       	ldi	r30, 0x12	; 18
 174:	f4 e0       	ldi	r31, 0x04	; 4
 176:	80 81       	ld	r24, Z
 178:	87 7f       	andi	r24, 0xF7	; 247
 17a:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 17c:	81 b1       	in	r24, 0x01	; 1
 17e:	8d 7f       	andi	r24, 0xFD	; 253
 180:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 182:	80 b1       	in	r24, 0x00	; 0
 184:	82 60       	ori	r24, 0x02	; 2
 186:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 188:	81 b1       	in	r24, 0x01	; 1
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 18e:	80 b1       	in	r24, 0x00	; 0
 190:	88 60       	ori	r24, 0x08	; 8
 192:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA3_set_dir(PORT_DIR_OUT);

	SPI_0_init();
 194:	0e 94 25 03 	call	0x64a	; 0x64a <SPI_0_init>
 198:	08 95       	ret

0000019a <I2C_0_initialization>:
}

/* configure pins and initialize registers */
void I2C_0_initialization(void)
{
	I2C_0_init();
 19a:	0e 94 b6 02 	call	0x56c	; 0x56c <I2C_0_init>
 19e:	08 95       	ret

000001a0 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 1a0:	0e 94 80 00 	call	0x100	; 0x100 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 1a4:	81 b1       	in	r24, 0x01	; 1
 1a6:	8f 77       	andi	r24, 0x7F	; 127
 1a8:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 1aa:	80 b1       	in	r24, 0x00	; 0
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	80 b9       	out	0x00, r24	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	8f 7b       	andi	r24, 0xBF	; 191
 1b4:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 1b6:	84 b1       	in	r24, 0x04	; 4
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	8f 77       	andi	r24, 0x7F	; 127
 1c0:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 1c2:	84 b1       	in	r24, 0x04	; 4
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	84 b9       	out	0x04, r24	; 4
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 1c8:	89 b1       	in	r24, 0x09	; 9
 1ca:	87 7f       	andi	r24, 0xF7	; 247
 1cc:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 1ce:	88 b1       	in	r24, 0x08	; 8
 1d0:	88 60       	ori	r24, 0x08	; 8
 1d2:	88 b9       	out	0x08, r24	; 8
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 1d4:	88 b1       	in	r24, 0x08	; 8
 1d6:	8f 7e       	andi	r24, 0xEF	; 239
 1d8:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 1da:	e4 e5       	ldi	r30, 0x54	; 84
 1dc:	f4 e0       	ldi	r31, 0x04	; 4
 1de:	80 81       	ld	r24, Z
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CLKCTRL_init();
 1e4:	0e 94 7b 00 	call	0xf6	; 0xf6 <CLKCTRL_init>

	USART_0_initialization();
 1e8:	0e 94 a5 00 	call	0x14a	; 0x14a <USART_0_initialization>

	SPI_0_initialization();
 1ec:	0e 94 b6 00 	call	0x16c	; 0x16c <SPI_0_initialization>

	CPUINT_init();
 1f0:	0e 94 7d 00 	call	0xfa	; 0xfa <CPUINT_init>

	SLPCTRL_init();
 1f4:	0e 94 23 03 	call	0x646	; 0x646 <SLPCTRL_init>

	I2C_0_initialization();
 1f8:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_0_initialization>

	BOD_init();
 1fc:	0e 94 79 00 	call	0xf2	; 0xf2 <BOD_init>
 200:	08 95       	ret

00000202 <I2C_0_do_I2C_RESET>:
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
	return I2C_0_master_operation(false);
}
 202:	e0 e1       	ldi	r30, 0x10	; 16
 204:	f8 e0       	ldi	r31, 0x08	; 8
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	88 60       	ori	r24, 0x08	; 8
 20a:	84 83       	std	Z+4, r24	; 0x04
 20c:	85 81       	ldd	r24, Z+5	; 0x05
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	85 83       	std	Z+5, r24	; 0x05
 212:	e2 e3       	ldi	r30, 0x32	; 50
 214:	fc e3       	ldi	r31, 0x3C	; 60
 216:	80 81       	ld	r24, Z
 218:	8e 7f       	andi	r24, 0xFE	; 254
 21a:	80 83       	st	Z, r24
 21c:	13 86       	std	Z+11, r1	; 0x0b
 21e:	8e e0       	ldi	r24, 0x0E	; 14
 220:	08 95       	ret

00000222 <I2C_0_do_I2C_IDLE>:
 222:	e2 e3       	ldi	r30, 0x32	; 50
 224:	fc e3       	ldi	r31, 0x3C	; 60
 226:	80 81       	ld	r24, Z
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	80 83       	st	Z, r24
 22c:	13 86       	std	Z+11, r1	; 0x0b
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret

00000232 <I2C_0_do_I2C_SEND_STOP>:
 232:	e0 e1       	ldi	r30, 0x10	; 16
 234:	f8 e0       	ldi	r31, 0x08	; 8
 236:	84 81       	ldd	r24, Z+4	; 0x04
 238:	83 60       	ori	r24, 0x03	; 3
 23a:	84 83       	std	Z+4, r24	; 0x04
 23c:	0e 94 11 01 	call	0x222	; 0x222 <I2C_0_do_I2C_IDLE>
 240:	08 95       	ret

00000242 <I2C_0_do_I2C_SEND_ADR_READ>:
 242:	e2 e3       	ldi	r30, 0x32	; 50
 244:	fc e3       	ldi	r31, 0x3C	; 60
 246:	80 81       	ld	r24, Z
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	80 83       	st	Z, r24
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__RODATA_PM_OFFSET__+0x7f8817>
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	08 95       	ret

0000025e <I2C_0_do_I2C_SEND_RESTART>:
 25e:	0e 94 21 01 	call	0x242	; 0x242 <I2C_0_do_I2C_SEND_ADR_READ>
 262:	08 95       	ret

00000264 <I2C_0_do_I2C_SEND_RESTART_READ>:
 264:	0e 94 21 01 	call	0x242	; 0x242 <I2C_0_do_I2C_SEND_ADR_READ>
 268:	08 95       	ret

0000026a <I2C_0_do_I2C_SEND_ADR_WRITE>:
 26a:	e2 e3       	ldi	r30, 0x32	; 50
 26c:	fc e3       	ldi	r31, 0x3C	; 60
 26e:	80 81       	ld	r24, Z
 270:	88 60       	ori	r24, 0x08	; 8
 272:	80 83       	st	Z, r24
 274:	81 81       	ldd	r24, Z+1	; 0x01
 276:	88 0f       	add	r24, r24
 278:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__RODATA_PM_OFFSET__+0x7f8817>
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	08 95       	ret

00000280 <I2C_0_do_I2C_SEND_RESTART_WRITE>:
 280:	0e 94 35 01 	call	0x26a	; 0x26a <I2C_0_do_I2C_SEND_ADR_WRITE>
 284:	08 95       	ret

00000286 <I2C_0_do_I2C_DO_ADDRESS_NACK>:
 286:	a2 e3       	ldi	r26, 0x32	; 50
 288:	bc e3       	ldi	r27, 0x3C	; 60
 28a:	8c 91       	ld	r24, X
 28c:	87 7f       	andi	r24, 0xF7	; 247
 28e:	8c 93       	st	X, r24
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	1b 96       	adiw	r26, 0x0b	; 11
 294:	8c 93       	st	X, r24
 296:	1b 97       	sbiw	r26, 0x0b	; 11
 298:	50 96       	adiw	r26, 0x10	; 16
 29a:	ed 91       	ld	r30, X+
 29c:	fc 91       	ld	r31, X
 29e:	51 97       	sbiw	r26, 0x11	; 17
 2a0:	5c 96       	adiw	r26, 0x1c	; 28
 2a2:	8d 91       	ld	r24, X+
 2a4:	9c 91       	ld	r25, X
 2a6:	5d 97       	sbiw	r26, 0x1d	; 29
 2a8:	09 95       	icall
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	21 f0       	breq	.+8      	; 0x2ba <I2C_0_do_I2C_DO_ADDRESS_NACK+0x34>
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x3a>
 2b4:	0e 94 32 01 	call	0x264	; 0x264 <I2C_0_do_I2C_SEND_RESTART_READ>
 2b8:	08 95       	ret
 2ba:	0e 94 40 01 	call	0x280	; 0x280 <I2C_0_do_I2C_SEND_RESTART_WRITE>
 2be:	08 95       	ret
 2c0:	0e 94 19 01 	call	0x232	; 0x232 <I2C_0_do_I2C_SEND_STOP>
 2c4:	08 95       	ret

000002c6 <I2C_0_do_I2C_RX_DO_ACK>:
 2c6:	e0 e1       	ldi	r30, 0x10	; 16
 2c8:	f8 e0       	ldi	r31, 0x08	; 8
 2ca:	84 81       	ldd	r24, Z+4	; 0x04
 2cc:	8b 7f       	andi	r24, 0xFB	; 251
 2ce:	84 83       	std	Z+4, r24	; 0x04
 2d0:	84 e0       	ldi	r24, 0x04	; 4
 2d2:	08 95       	ret

000002d4 <I2C_0_do_I2C_TX_DO_ACK>:
 2d4:	e0 e1       	ldi	r30, 0x10	; 16
 2d6:	f8 e0       	ldi	r31, 0x08	; 8
 2d8:	84 81       	ldd	r24, Z+4	; 0x04
 2da:	8b 7f       	andi	r24, 0xFB	; 251
 2dc:	84 83       	std	Z+4, r24	; 0x04
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	08 95       	ret

000002e2 <I2C_0_do_I2C_DO_NACK_STOP>:
 2e2:	e0 e1       	ldi	r30, 0x10	; 16
 2e4:	f8 e0       	ldi	r31, 0x08	; 8
 2e6:	84 81       	ldd	r24, Z+4	; 0x04
 2e8:	84 60       	ori	r24, 0x04	; 4
 2ea:	84 83       	std	Z+4, r24	; 0x04
 2ec:	84 81       	ldd	r24, Z+4	; 0x04
 2ee:	83 60       	ori	r24, 0x03	; 3
 2f0:	84 83       	std	Z+4, r24	; 0x04
 2f2:	0e 94 11 01 	call	0x222	; 0x222 <I2C_0_do_I2C_IDLE>
 2f6:	08 95       	ret

000002f8 <I2C_0_do_I2C_DO_NACK_RESTART>:
 2f8:	e0 e1       	ldi	r30, 0x10	; 16
 2fa:	f8 e0       	ldi	r31, 0x08	; 8
 2fc:	84 81       	ldd	r24, Z+4	; 0x04
 2fe:	84 60       	ori	r24, 0x04	; 4
 300:	84 83       	std	Z+4, r24	; 0x04
 302:	88 e0       	ldi	r24, 0x08	; 8
 304:	08 95       	ret

00000306 <I2C_0_do_I2C_TX>:
 306:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__RODATA_PM_OFFSET__+0x7f8815>
 30a:	84 ff       	sbrs	r24, 4
 30c:	19 c0       	rjmp	.+50     	; 0x340 <I2C_0_do_I2C_TX+0x3a>
 30e:	a2 e3       	ldi	r26, 0x32	; 50
 310:	bc e3       	ldi	r27, 0x3C	; 60
 312:	52 96       	adiw	r26, 0x12	; 18
 314:	ed 91       	ld	r30, X+
 316:	fc 91       	ld	r31, X
 318:	53 97       	sbiw	r26, 0x13	; 19
 31a:	5e 96       	adiw	r26, 0x1e	; 30
 31c:	8d 91       	ld	r24, X+
 31e:	9c 91       	ld	r25, X
 320:	5f 97       	sbiw	r26, 0x1f	; 31
 322:	09 95       	icall
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	19 f0       	breq	.+6      	; 0x32e <I2C_0_do_I2C_TX+0x28>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	21 f0       	breq	.+8      	; 0x334 <I2C_0_do_I2C_TX+0x2e>
 32c:	06 c0       	rjmp	.+12     	; 0x33a <I2C_0_do_I2C_TX+0x34>
 32e:	0e 94 32 01 	call	0x264	; 0x264 <I2C_0_do_I2C_SEND_RESTART_READ>
 332:	08 95       	ret
 334:	0e 94 40 01 	call	0x280	; 0x280 <I2C_0_do_I2C_SEND_RESTART_WRITE>
 338:	08 95       	ret
 33a:	0e 94 19 01 	call	0x232	; 0x232 <I2C_0_do_I2C_SEND_STOP>
 33e:	08 95       	ret
 340:	e2 e3       	ldi	r30, 0x32	; 50
 342:	fc e3       	ldi	r31, 0x3C	; 60
 344:	80 81       	ld	r24, Z
 346:	87 7f       	andi	r24, 0xF7	; 247
 348:	80 83       	st	Z, r24
 34a:	a2 81       	ldd	r26, Z+2	; 0x02
 34c:	b3 81       	ldd	r27, Z+3	; 0x03
 34e:	cd 01       	movw	r24, r26
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	82 83       	std	Z+2, r24	; 0x02
 354:	93 83       	std	Z+3, r25	; 0x03
 356:	8c 91       	ld	r24, X
 358:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__RODATA_PM_OFFSET__+0x7f8818>
 35c:	84 81       	ldd	r24, Z+4	; 0x04
 35e:	95 81       	ldd	r25, Z+5	; 0x05
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	84 83       	std	Z+4, r24	; 0x04
 364:	95 83       	std	Z+5, r25	; 0x05
 366:	89 2b       	or	r24, r25
 368:	11 f0       	breq	.+4      	; 0x36e <I2C_0_do_I2C_TX+0x68>
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	08 95       	ret
 36e:	85 e0       	ldi	r24, 0x05	; 5
 370:	08 95       	ret

00000372 <I2C_0_do_I2C_RX>:
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	e2 e3       	ldi	r30, 0x32	; 50
 378:	fc e3       	ldi	r31, 0x3C	; 60
 37a:	80 81       	ld	r24, Z
 37c:	87 7f       	andi	r24, 0xF7	; 247
 37e:	80 83       	st	Z, r24
 380:	84 81       	ldd	r24, Z+4	; 0x04
 382:	95 81       	ldd	r25, Z+5	; 0x05
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	31 f4       	brne	.+12     	; 0x394 <I2C_0_do_I2C_RX+0x22>
 388:	e0 e1       	ldi	r30, 0x10	; 16
 38a:	f8 e0       	ldi	r31, 0x08	; 8
 38c:	84 81       	ldd	r24, Z+4	; 0x04
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	84 83       	std	Z+4, r24	; 0x04
 392:	05 c0       	rjmp	.+10     	; 0x39e <I2C_0_do_I2C_RX+0x2c>
 394:	e0 e1       	ldi	r30, 0x10	; 16
 396:	f8 e0       	ldi	r31, 0x08	; 8
 398:	84 81       	ldd	r24, Z+4	; 0x04
 39a:	8b 7f       	andi	r24, 0xFB	; 251
 39c:	84 83       	std	Z+4, r24	; 0x04
 39e:	e2 e3       	ldi	r30, 0x32	; 50
 3a0:	fc e3       	ldi	r31, 0x3C	; 60
 3a2:	84 81       	ldd	r24, Z+4	; 0x04
 3a4:	95 81       	ldd	r25, Z+5	; 0x05
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	84 83       	std	Z+4, r24	; 0x04
 3aa:	95 83       	std	Z+5, r25	; 0x05
 3ac:	89 2b       	or	r24, r25
 3ae:	a9 f0       	breq	.+42     	; 0x3da <I2C_0_do_I2C_RX+0x68>
 3b0:	df 01       	movw	r26, r30
 3b2:	c2 81       	ldd	r28, Z+2	; 0x02
 3b4:	d3 81       	ldd	r29, Z+3	; 0x03
 3b6:	e0 e1       	ldi	r30, 0x10	; 16
 3b8:	f8 e0       	ldi	r31, 0x08	; 8
 3ba:	80 85       	ldd	r24, Z+8	; 0x08
 3bc:	88 83       	st	Y, r24
 3be:	12 96       	adiw	r26, 0x02	; 2
 3c0:	8d 91       	ld	r24, X+
 3c2:	9c 91       	ld	r25, X
 3c4:	13 97       	sbiw	r26, 0x03	; 3
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	12 96       	adiw	r26, 0x02	; 2
 3ca:	8d 93       	st	X+, r24
 3cc:	9c 93       	st	X, r25
 3ce:	13 97       	sbiw	r26, 0x03	; 3
 3d0:	84 81       	ldd	r24, Z+4	; 0x04
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	84 83       	std	Z+4, r24	; 0x04
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	26 c0       	rjmp	.+76     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 3da:	a2 e3       	ldi	r26, 0x32	; 50
 3dc:	bc e3       	ldi	r27, 0x3C	; 60
 3de:	12 96       	adiw	r26, 0x02	; 2
 3e0:	ed 91       	ld	r30, X+
 3e2:	fc 91       	ld	r31, X
 3e4:	13 97       	sbiw	r26, 0x03	; 3
 3e6:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <__RODATA_PM_OFFSET__+0x7f8818>
 3ea:	80 83       	st	Z, r24
 3ec:	12 96       	adiw	r26, 0x02	; 2
 3ee:	8d 91       	ld	r24, X+
 3f0:	9c 91       	ld	r25, X
 3f2:	13 97       	sbiw	r26, 0x03	; 3
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	12 96       	adiw	r26, 0x02	; 2
 3f8:	8d 93       	st	X+, r24
 3fa:	9c 93       	st	X, r25
 3fc:	13 97       	sbiw	r26, 0x03	; 3
 3fe:	8c 91       	ld	r24, X
 400:	84 60       	ori	r24, 0x04	; 4
 402:	8c 93       	st	X, r24
 404:	1c 96       	adiw	r26, 0x0c	; 12
 406:	ed 91       	ld	r30, X+
 408:	fc 91       	ld	r31, X
 40a:	1d 97       	sbiw	r26, 0x0d	; 13
 40c:	58 96       	adiw	r26, 0x18	; 24
 40e:	8d 91       	ld	r24, X+
 410:	9c 91       	ld	r25, X
 412:	59 97       	sbiw	r26, 0x19	; 25
 414:	09 95       	icall
 416:	82 50       	subi	r24, 0x02	; 2
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	18 f4       	brcc	.+6      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 41c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <I2C_0_do_I2C_DO_NACK_RESTART>
 420:	02 c0       	rjmp	.+4      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 422:	0e 94 71 01 	call	0x2e2	; 0x2e2 <I2C_0_do_I2C_DO_NACK_STOP>
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <I2C_0_do_I2C_TX_EMPTY>:
 42c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__RODATA_PM_OFFSET__+0x7f8815>
 430:	84 ff       	sbrs	r24, 4
 432:	19 c0       	rjmp	.+50     	; 0x466 <I2C_0_do_I2C_TX_EMPTY+0x3a>
 434:	a2 e3       	ldi	r26, 0x32	; 50
 436:	bc e3       	ldi	r27, 0x3C	; 60
 438:	52 96       	adiw	r26, 0x12	; 18
 43a:	ed 91       	ld	r30, X+
 43c:	fc 91       	ld	r31, X
 43e:	53 97       	sbiw	r26, 0x13	; 19
 440:	5e 96       	adiw	r26, 0x1e	; 30
 442:	8d 91       	ld	r24, X+
 444:	9c 91       	ld	r25, X
 446:	5f 97       	sbiw	r26, 0x1f	; 31
 448:	09 95       	icall
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	19 f0       	breq	.+6      	; 0x454 <I2C_0_do_I2C_TX_EMPTY+0x28>
 44e:	83 30       	cpi	r24, 0x03	; 3
 450:	21 f0       	breq	.+8      	; 0x45a <I2C_0_do_I2C_TX_EMPTY+0x2e>
 452:	06 c0       	rjmp	.+12     	; 0x460 <I2C_0_do_I2C_TX_EMPTY+0x34>
 454:	0e 94 32 01 	call	0x264	; 0x264 <I2C_0_do_I2C_SEND_RESTART_READ>
 458:	08 95       	ret
 45a:	0e 94 40 01 	call	0x280	; 0x280 <I2C_0_do_I2C_SEND_RESTART_WRITE>
 45e:	08 95       	ret
 460:	0e 94 19 01 	call	0x232	; 0x232 <I2C_0_do_I2C_SEND_STOP>
 464:	08 95       	ret
 466:	a2 e3       	ldi	r26, 0x32	; 50
 468:	bc e3       	ldi	r27, 0x3C	; 60
 46a:	8c 91       	ld	r24, X
 46c:	84 60       	ori	r24, 0x04	; 4
 46e:	8c 93       	st	X, r24
 470:	1c 96       	adiw	r26, 0x0c	; 12
 472:	ed 91       	ld	r30, X+
 474:	fc 91       	ld	r31, X
 476:	1d 97       	sbiw	r26, 0x0d	; 13
 478:	58 96       	adiw	r26, 0x18	; 24
 47a:	8d 91       	ld	r24, X+
 47c:	9c 91       	ld	r25, X
 47e:	59 97       	sbiw	r26, 0x19	; 25
 480:	09 95       	icall
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	39 f0       	breq	.+14     	; 0x494 <I2C_0_do_I2C_TX_EMPTY+0x68>
 486:	84 30       	cpi	r24, 0x04	; 4
 488:	41 f0       	breq	.+16     	; 0x49a <I2C_0_do_I2C_TX_EMPTY+0x6e>
 48a:	82 30       	cpi	r24, 0x02	; 2
 48c:	49 f4       	brne	.+18     	; 0x4a0 <I2C_0_do_I2C_TX_EMPTY+0x74>
 48e:	0e 94 32 01 	call	0x264	; 0x264 <I2C_0_do_I2C_SEND_RESTART_READ>
 492:	08 95       	ret
 494:	0e 94 40 01 	call	0x280	; 0x280 <I2C_0_do_I2C_SEND_RESTART_WRITE>
 498:	08 95       	ret
 49a:	0e 94 83 01 	call	0x306	; 0x306 <I2C_0_do_I2C_TX>
 49e:	08 95       	ret
 4a0:	0e 94 19 01 	call	0x232	; 0x232 <I2C_0_do_I2C_SEND_STOP>
 4a4:	08 95       	ret

000004a6 <I2C_0_do_I2C_BUS_COLLISION>:
 4a6:	e0 e1       	ldi	r30, 0x10	; 16
 4a8:	f8 e0       	ldi	r31, 0x08	; 8
 4aa:	85 81       	ldd	r24, Z+5	; 0x05
 4ac:	88 60       	ori	r24, 0x08	; 8
 4ae:	85 83       	std	Z+5, r24	; 0x05
 4b0:	a2 e3       	ldi	r26, 0x32	; 50
 4b2:	bc e3       	ldi	r27, 0x3C	; 60
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	1b 96       	adiw	r26, 0x0b	; 11
 4b8:	8c 93       	st	X, r24
 4ba:	1b 97       	sbiw	r26, 0x0b	; 11
 4bc:	1e 96       	adiw	r26, 0x0e	; 14
 4be:	ed 91       	ld	r30, X+
 4c0:	fc 91       	ld	r31, X
 4c2:	1f 97       	sbiw	r26, 0x0f	; 15
 4c4:	5a 96       	adiw	r26, 0x1a	; 26
 4c6:	8d 91       	ld	r24, X+
 4c8:	9c 91       	ld	r25, X
 4ca:	5b 97       	sbiw	r26, 0x1b	; 27
 4cc:	09 95       	icall
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	19 f0       	breq	.+6      	; 0x4d8 <I2C_0_do_I2C_BUS_COLLISION+0x32>
 4d2:	83 30       	cpi	r24, 0x03	; 3
 4d4:	21 f0       	breq	.+8      	; 0x4de <I2C_0_do_I2C_BUS_COLLISION+0x38>
 4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <I2C_0_do_I2C_BUS_COLLISION+0x3e>
 4d8:	0e 94 32 01 	call	0x264	; 0x264 <I2C_0_do_I2C_SEND_RESTART_READ>
 4dc:	08 95       	ret
 4de:	0e 94 40 01 	call	0x280	; 0x280 <I2C_0_do_I2C_SEND_RESTART_WRITE>
 4e2:	08 95       	ret
 4e4:	0e 94 01 01 	call	0x202	; 0x202 <I2C_0_do_I2C_RESET>
 4e8:	08 95       	ret

000004ea <I2C_0_do_I2C_BUS_ERROR>:
 4ea:	e0 e1       	ldi	r30, 0x10	; 16
 4ec:	f8 e0       	ldi	r31, 0x08	; 8
 4ee:	84 81       	ldd	r24, Z+4	; 0x04
 4f0:	88 60       	ori	r24, 0x08	; 8
 4f2:	84 83       	std	Z+4, r24	; 0x04
 4f4:	85 81       	ldd	r24, Z+5	; 0x05
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	85 83       	std	Z+5, r24	; 0x05
 4fa:	e2 e3       	ldi	r30, 0x32	; 50
 4fc:	fc e3       	ldi	r31, 0x3C	; 60
 4fe:	80 81       	ld	r24, Z
 500:	8e 7f       	andi	r24, 0xFE	; 254
 502:	80 83       	st	Z, r24
 504:	82 e0       	ldi	r24, 0x02	; 2
 506:	83 87       	std	Z+11, r24	; 0x0b
 508:	8e e0       	ldi	r24, 0x0E	; 14
 50a:	08 95       	ret

0000050c <I2C_0_master_isr>:
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	e0 e1       	ldi	r30, 0x10	; 16
 512:	f8 e0       	ldi	r31, 0x08	; 8
 514:	85 81       	ldd	r24, Z+5	; 0x05
 516:	80 6c       	ori	r24, 0xC0	; 192
 518:	85 83       	std	Z+5, r24	; 0x05
 51a:	80 91 32 3c 	lds	r24, 0x3C32	; 0x803c32 <__data_end>
 51e:	83 ff       	sbrs	r24, 3
 520:	07 c0       	rjmp	.+14     	; 0x530 <I2C_0_master_isr+0x24>
 522:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__RODATA_PM_OFFSET__+0x7f8815>
 526:	84 ff       	sbrs	r24, 4
 528:	03 c0       	rjmp	.+6      	; 0x530 <I2C_0_master_isr+0x24>
 52a:	8f e0       	ldi	r24, 0x0F	; 15
 52c:	80 93 3c 3c 	sts	0x3C3C, r24	; 0x803c3c <__data_end+0xa>
 530:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__RODATA_PM_OFFSET__+0x7f8815>
 534:	83 ff       	sbrs	r24, 3
 536:	03 c0       	rjmp	.+6      	; 0x53e <I2C_0_master_isr+0x32>
 538:	80 e1       	ldi	r24, 0x10	; 16
 53a:	80 93 3c 3c 	sts	0x3C3C, r24	; 0x803c3c <__data_end+0xa>
 53e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__RODATA_PM_OFFSET__+0x7f8815>
 542:	82 ff       	sbrs	r24, 2
 544:	03 c0       	rjmp	.+6      	; 0x54c <I2C_0_master_isr+0x40>
 546:	81 e1       	ldi	r24, 0x11	; 17
 548:	80 93 3c 3c 	sts	0x3C3C, r24	; 0x803c3c <__data_end+0xa>
 54c:	c2 e3       	ldi	r28, 0x32	; 50
 54e:	dc e3       	ldi	r29, 0x3C	; 60
 550:	ea 85       	ldd	r30, Y+10	; 0x0a
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	e0 50       	subi	r30, 0x00	; 0
 55a:	f4 4c       	sbci	r31, 0xC4	; 196
 55c:	01 90       	ld	r0, Z+
 55e:	f0 81       	ld	r31, Z
 560:	e0 2d       	mov	r30, r0
 562:	09 95       	icall
 564:	8a 87       	std	Y+10, r24	; 0x0a
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <I2C_0_init>:
 56c:	e0 e1       	ldi	r30, 0x10	; 16
 56e:	f8 e0       	ldi	r31, 0x08	; 8
 570:	8b e0       	ldi	r24, 0x0B	; 11
 572:	86 83       	std	Z+6, r24	; 0x06
 574:	81 ec       	ldi	r24, 0xC1	; 193
 576:	83 83       	std	Z+3, r24	; 0x03
 578:	08 95       	ret

0000057a <__vector_25>:
    I2C_0_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_0_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31
	I2C_0_master_isr();
 59c:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_0_master_isr>
}
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	7f 91       	pop	r23
 5ae:	6f 91       	pop	r22
 5b0:	5f 91       	pop	r21
 5b2:	4f 91       	pop	r20
 5b4:	3f 91       	pop	r19
 5b6:	2f 91       	pop	r18
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <__vector_5>:
#include <atmel_start_pins.h>
#include <util/delay.h>


ISR(PORTC_PORT_vect)
{
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 93       	push	r18
 5ce:	3f 93       	push	r19
 5d0:	4f 93       	push	r20
 5d2:	5f 93       	push	r21
 5d4:	6f 93       	push	r22
 5d6:	7f 93       	push	r23
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	af 93       	push	r26
 5de:	bf 93       	push	r27
 5e0:	ef 93       	push	r30
 5e2:	ff 93       	push	r31
	printf("PORTC ISR\r\n");
 5e4:	8a ea       	ldi	r24, 0xAA	; 170
 5e6:	97 e8       	ldi	r25, 0x87	; 135
 5e8:	0e 94 a0 03 	call	0x740	; 0x740 <puts>
	
	if (PORTC.INTFLAGS & 0x10)
 5ec:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__RODATA_PM_OFFSET__+0x7f8449>
 5f0:	84 ff       	sbrs	r24, 4
 5f2:	18 c0       	rjmp	.+48     	; 0x624 <__vector_5+0x62>
	{
		printf("PORTC ISR\r\n");
 5f4:	8a ea       	ldi	r24, 0xAA	; 170
 5f6:	97 e8       	ldi	r25, 0x87	; 135
 5f8:	0e 94 a0 03 	call	0x740	; 0x740 <puts>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 5fc:	85 b1       	in	r24, 0x05	; 5
 5fe:	8f 77       	andi	r24, 0x7F	; 127
 600:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 602:	2f e7       	ldi	r18, 0x7F	; 127
 604:	8a e1       	ldi	r24, 0x1A	; 26
 606:	96 e0       	ldi	r25, 0x06	; 6
 608:	21 50       	subi	r18, 0x01	; 1
 60a:	80 40       	sbci	r24, 0x00	; 0
 60c:	90 40       	sbci	r25, 0x00	; 0
 60e:	e1 f7       	brne	.-8      	; 0x608 <__vector_5+0x46>
 610:	00 c0       	rjmp	.+0      	; 0x612 <__vector_5+0x50>
 612:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
 614:	85 b1       	in	r24, 0x05	; 5
 616:	80 68       	ori	r24, 0x80	; 128
 618:	85 b9       	out	0x05, r24	; 5
		
		LED_Pin_set_level(0);
		_delay_ms(2000);
		LED_Pin_set_level(1);
		
		PORTC.INTFLAGS |= 0x08;
 61a:	e0 e4       	ldi	r30, 0x40	; 64
 61c:	f4 e0       	ldi	r31, 0x04	; 4
 61e:	81 85       	ldd	r24, Z+9	; 0x09
 620:	88 60       	ori	r24, 0x08	; 8
 622:	81 87       	std	Z+9, r24	; 0x09
	}
}
 624:	ff 91       	pop	r31
 626:	ef 91       	pop	r30
 628:	bf 91       	pop	r27
 62a:	af 91       	pop	r26
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	7f 91       	pop	r23
 632:	6f 91       	pop	r22
 634:	5f 91       	pop	r21
 636:	4f 91       	pop	r20
 638:	3f 91       	pop	r19
 63a:	2f 91       	pop	r18
 63c:	0f 90       	pop	r0
 63e:	0f be       	out	0x3f, r0	; 63
 640:	0f 90       	pop	r0
 642:	1f 90       	pop	r1
 644:	18 95       	reti

00000646 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	08 95       	ret

0000064a <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
 64a:	e0 e2       	ldi	r30, 0x20	; 32
 64c:	f8 e0       	ldi	r31, 0x08	; 8
 64e:	81 e2       	ldi	r24, 0x21	; 33
 650:	80 83       	st	Z, r24
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	82 83       	std	Z+2, r24	; 0x02
 656:	e6 e5       	ldi	r30, 0x56	; 86
 658:	fc e3       	ldi	r31, 0x3C	; 60
 65a:	10 82       	st	Z, r1
 65c:	15 82       	std	Z+5, r1	; 0x05
 65e:	16 82       	std	Z+6, r1	; 0x06
 660:	08 95       	ret

00000662 <__vector_26>:
}

ISR(SPI0_INT_vect)
{
 662:	1f 92       	push	r1
 664:	0f 92       	push	r0
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	0f 92       	push	r0
 66a:	11 24       	eor	r1, r1
 66c:	2f 93       	push	r18
 66e:	3f 93       	push	r19
 670:	4f 93       	push	r20
 672:	5f 93       	push	r21
 674:	6f 93       	push	r22
 676:	7f 93       	push	r23
 678:	8f 93       	push	r24
 67a:	9f 93       	push	r25
 67c:	af 93       	push	r26
 67e:	bf 93       	push	r27
 680:	ef 93       	push	r30
 682:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI0.DATA;
 684:	e0 e2       	ldi	r30, 0x20	; 32
 686:	f8 e0       	ldi	r31, 0x08	; 8
 688:	94 81       	ldd	r25, Z+4	; 0x04
	uint8_t wdata = 0;

	SPI0.INTFLAGS = SPI_RXCIF_bm;
 68a:	80 e8       	ldi	r24, 0x80	; 128
 68c:	83 83       	std	Z+3, r24	; 0x03

	if (SPI_0_desc.type != SPI_WRITE) {
 68e:	80 91 5a 3c 	lds	r24, 0x3C5A	; 0x803c5a <SPI_0_desc+0x4>
 692:	82 30       	cpi	r24, 0x02	; 2
 694:	29 f0       	breq	.+10     	; 0x6a0 <__vector_26+0x3e>
		*SPI_0_desc.data = rdata;
 696:	e0 91 57 3c 	lds	r30, 0x3C57	; 0x803c57 <SPI_0_desc+0x1>
 69a:	f0 91 58 3c 	lds	r31, 0x3C58	; 0x803c58 <SPI_0_desc+0x2>
 69e:	90 83       	st	Z, r25
	}

	SPI_0_desc.data++;
 6a0:	e6 e5       	ldi	r30, 0x56	; 86
 6a2:	fc e3       	ldi	r31, 0x3C	; 60
 6a4:	a1 81       	ldd	r26, Z+1	; 0x01
 6a6:	b2 81       	ldd	r27, Z+2	; 0x02
 6a8:	9d 01       	movw	r18, r26
 6aa:	2f 5f       	subi	r18, 0xFF	; 255
 6ac:	3f 4f       	sbci	r19, 0xFF	; 255
 6ae:	21 83       	std	Z+1, r18	; 0x01
 6b0:	32 83       	std	Z+2, r19	; 0x02

	if (SPI_0_desc.type != SPI_READ)
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	19 f0       	breq	.+6      	; 0x6bc <__vector_26+0x5a>
		wdata = *SPI_0_desc.data;
 6b6:	11 96       	adiw	r26, 0x01	; 1
 6b8:	9c 91       	ld	r25, X
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <__vector_26+0x5c>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI0.DATA;
	uint8_t wdata = 0;
 6bc:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
 6be:	e6 e5       	ldi	r30, 0x56	; 86
 6c0:	fc e3       	ldi	r31, 0x3C	; 60
 6c2:	83 81       	ldd	r24, Z+3	; 0x03
 6c4:	81 50       	subi	r24, 0x01	; 1
 6c6:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
 6c8:	88 23       	and	r24, r24
 6ca:	19 f0       	breq	.+6      	; 0x6d2 <__vector_26+0x70>
		// more data to send, send a byte
		SPI0.DATA = wdata;
 6cc:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
 6d0:	0a c0       	rjmp	.+20     	; 0x6e6 <__vector_26+0x84>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
 6d2:	e6 e5       	ldi	r30, 0x56	; 86
 6d4:	fc e3       	ldi	r31, 0x3C	; 60
 6d6:	83 e0       	ldi	r24, 0x03	; 3
 6d8:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
 6da:	05 80       	ldd	r0, Z+5	; 0x05
 6dc:	f6 81       	ldd	r31, Z+6	; 0x06
 6de:	e0 2d       	mov	r30, r0
 6e0:	30 97       	sbiw	r30, 0x00	; 0
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <__vector_26+0x84>
			SPI_0_desc.cb();
 6e4:	09 95       	icall
		}
	}
}
 6e6:	ff 91       	pop	r31
 6e8:	ef 91       	pop	r30
 6ea:	bf 91       	pop	r27
 6ec:	af 91       	pop	r26
 6ee:	9f 91       	pop	r25
 6f0:	8f 91       	pop	r24
 6f2:	7f 91       	pop	r23
 6f4:	6f 91       	pop	r22
 6f6:	5f 91       	pop	r21
 6f8:	4f 91       	pop	r20
 6fa:	3f 91       	pop	r19
 6fc:	2f 91       	pop	r18
 6fe:	0f 90       	pop	r0
 700:	0f be       	out	0x3f, r0	; 63
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
 708:	e0 e0       	ldi	r30, 0x00	; 0
 70a:	f8 e0       	ldi	r31, 0x08	; 8
 70c:	8d e6       	ldi	r24, 0x6D	; 109
 70e:	95 e0       	ldi	r25, 0x05	; 5
 710:	80 87       	std	Z+8, r24	; 0x08
 712:	91 87       	std	Z+9, r25	; 0x09
 714:	80 ec       	ldi	r24, 0xC0	; 192
 716:	86 83       	std	Z+6, r24	; 0x06
 718:	84 e2       	ldi	r24, 0x24	; 36
 71a:	9c e3       	ldi	r25, 0x3C	; 60
 71c:	80 93 60 3c 	sts	0x3C60, r24	; 0x803c60 <__iob+0x2>
 720:	90 93 61 3c 	sts	0x3C61, r25	; 0x803c61 <__iob+0x3>
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	08 95       	ret

00000728 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
 728:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 72c:	95 ff       	sbrs	r25, 5
 72e:	fc cf       	rjmp	.-8      	; 0x728 <USART_0_write>
		;
	USART0.TXDATAL = data;
 730:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 734:	08 95       	ret

00000736 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 736:	0e 94 94 03 	call	0x728	; 0x728 <USART_0_write>
	return 0;
}
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	08 95       	ret

00000740 <puts>:
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	e0 91 60 3c 	lds	r30, 0x3C60	; 0x803c60 <__iob+0x2>
 74c:	f0 91 61 3c 	lds	r31, 0x3C61	; 0x803c61 <__iob+0x3>
 750:	23 81       	ldd	r18, Z+3	; 0x03
 752:	21 ff       	sbrs	r18, 1
 754:	1b c0       	rjmp	.+54     	; 0x78c <puts+0x4c>
 756:	8c 01       	movw	r16, r24
 758:	d0 e0       	ldi	r29, 0x00	; 0
 75a:	c0 e0       	ldi	r28, 0x00	; 0
 75c:	f8 01       	movw	r30, r16
 75e:	81 91       	ld	r24, Z+
 760:	8f 01       	movw	r16, r30
 762:	60 91 60 3c 	lds	r22, 0x3C60	; 0x803c60 <__iob+0x2>
 766:	70 91 61 3c 	lds	r23, 0x3C61	; 0x803c61 <__iob+0x3>
 76a:	db 01       	movw	r26, r22
 76c:	18 96       	adiw	r26, 0x08	; 8
 76e:	ed 91       	ld	r30, X+
 770:	fc 91       	ld	r31, X
 772:	19 97       	sbiw	r26, 0x09	; 9
 774:	88 23       	and	r24, r24
 776:	31 f0       	breq	.+12     	; 0x784 <puts+0x44>
 778:	09 95       	icall
 77a:	89 2b       	or	r24, r25
 77c:	79 f3       	breq	.-34     	; 0x75c <puts+0x1c>
 77e:	df ef       	ldi	r29, 0xFF	; 255
 780:	cf ef       	ldi	r28, 0xFF	; 255
 782:	ec cf       	rjmp	.-40     	; 0x75c <puts+0x1c>
 784:	8a e0       	ldi	r24, 0x0A	; 10
 786:	09 95       	icall
 788:	89 2b       	or	r24, r25
 78a:	19 f0       	breq	.+6      	; 0x792 <puts+0x52>
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	9f ef       	ldi	r25, 0xFF	; 255
 790:	02 c0       	rjmp	.+4      	; 0x796 <puts+0x56>
 792:	8d 2f       	mov	r24, r29
 794:	9c 2f       	mov	r25, r28
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17
 79c:	0f 91       	pop	r16
 79e:	08 95       	ret

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
